<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="gyqx.spdherp.stockout.dao.mapper.BillMgrMapper">
    <insert id="insertFillOutStocks">
        INSERT INTO out_stock (id,bill_id,out_stock_kind,out_stock_type,source_bill_id,out_org_id,out_org_name,out_dept_id,out_dept_name,out_stoc_id,in_org_id,in_org_name,in_dept_id,in_dept_name,in_stoc_id,fill_date,filler,auditor,audit_date,accounter,account_date,rec_address_id,rec_linkman,rec_linkman_phone,rec_address,status,patient_name,cost_kind,version,last_update_datetime,remark)
        VALUES
        <foreach collection="outStocks" item="item" separator=",">
            (#{item.id},#{item.billId},#{item.outStockKind},#{item.outStockType},#{item.sourceBillId},#{item.outOrgId},#{item.outOrgName},#{item.outDeptId},#{item.outDeptName},#{item.outStocId},#{item.inOrgId},#{item.inOrgName},#{item.inDeptId},#{item.inDeptName},#{item.inStocId},#{item.fillDate},#{item.filler},#{item.auditor},#{item.auditDate},#{item.accounter},#{item.accountDate},#{item.recAddressId},#{item.recLinkman},#{item.recLinkmanPhone},#{item.recAddress},#{item.status},#{item.patientName},#{item.costKind},#{item.version},#{item.lastUpdateDatetime},#{item.remark})
        </foreach>
    </insert>
    <insert id="insertFillOutStockLists">
        INSERT INTO out_stock_list (id,pid,bill_id,source_bill_id,out_bill_row,prov_id,prov_code,prov_name,goods_id,goods_name,goods_gg,mfrs_id,mfrs_name,made,packet_code,is_packet,is_unique,batch_code,sterilization_date,sterilization_code,sterilization_end_date,expdt_end_date,unit,out_qty,out_packet_qty,master_code,sec_code,status,hibc_code,shelf_id,version,last_update_datetime,certificate_code,sur_code)
        VALUES
        <foreach collection="outStockLists" item="item" separator=",">
            (#{item.id},#{item.pid},#{item.billId},#{item.sourceBillId},#{item.outBillRow},#{item.provId},#{item.provCode},#{item.provName},#{item.goodsId},#{item.goodsName},#{item.goodsGg},#{item.mfrsId},#{item.mfrsName},#{item.made},#{item.packetCode},#{item.isPacket},#{item.isUnique},#{item.batchCode},#{item.sterilizationDate},#{item.sterilizationCode},#{item.sterilizationEndDate},#{item.expdtEndDate},#{item.unit},#{item.outQty},#{item.outPacketQty},#{item.masterCode},#{item.secCode},#{item.status},#{item.hibcCode},#{item.shelfId},#{item.version},#{item.lastUpdateDatetime},#{item.certificateCode},#{item.surCode})
        </foreach>
    </insert>
    <insert id="insertFillOutStockUniques">
        INSERT INTO out_stock_unique_code (id,pid,bill_id,p_row_id,prov_id,goods_id,goods_batch_id,in_price,in_time,unique_code,version,last_update_datetime,epc, qty)
        VALUES
        <foreach collection="outStockUniques" item="item" separator=",">
            (#{item.id},#{item.pid},#{item.billId},#{item.pRowId},#{item.provId},#{item.goodsId},#{item.goodsBatchId},#{item.inPrice},#{item.inTime},#{item.uniqueCode},#{item.version},#{item.lastUpdateDatetime},#{item.epc},#{item.qty})
        </foreach>
    </insert>
    <insert id="insertFillOutStockBatchs">
        INSERT INTO out_stock_batch (id, pid, bill_id, p_row_id, prov_id, goods_id, goods_batch_id, in_price, in_time, qty, big_batch_code, version, last_update_datetime, use_qty, settle_qty)
        VALUES
        <foreach collection="outStockBatchs" item="item" separator=",">
            (#{item.id}, #{item.pid}, #{item.billId}, #{item.pRowId}, #{item.provId}, #{item.goodsId}, #{item.goodsBatchId}, #{item.inPrice}, #{item.inTime}, #{item.qty}, #{item.bigBatchCode}, #{item.version}, #{item.lastUpdateDatetime}, #{item.useQty}, #{item.settleQty})
        </foreach>
    </insert>
    <update id="updateSurPkg">
        UPDATE surgery_pkg
        SET status = #{pkgStDabao}, version = version + 1, last_update_datetime = NOW()
        WHERE sur_code IN
                <foreach collection="pkgCodeList" item="pkgCode" open="(" close=")" separator=",">
                    #{pkgCode}
                </foreach>
                AND status = #{pkgStQgck}
    </update>
    <update id="updateTakingInfo">
        UPDATE hos_taking_stock
        SET bill_id = sur_pkg_id, version = version + 1, last_update_datetime = NOW()
        WHERE bill_id = #{billId} AND sur_pkg_id IN
        <foreach collection="pkgCodeList" item="pkgCode" open="(" close=")" separator=",">
            #{pkgCode}
        </foreach>
    </update>
    <insert id="insertReturnProvBillBatch">
        INSERT INTO `return_prov_bill`
        (
            `id`,
            `source_bill_id`,
            `return_kind`,
            `hos_id`,
            `hos_name`,
            `dept_id`,
            `dept_name`,
            `stoc_id`,
            `prov_code`,
            `prov_id`,
            `prov_name`,
            `status`,
            `fill_date`,
            `filler`,
            `filler_name`,
            `auditor`,
            `confirmer`,
            `remark`,
            `last_update_datetime`,
            `version`
        )
        VALUES
        <foreach collection="list" item="item" separator=",">
            (
                #{item.id},
                #{item.sourceBillId},
                #{item.returnKind},
                #{item.hosId},
                #{item.hosName},
                #{item.deptId},
                #{item.deptName},
                #{item.stocId},
                #{item.provCode},
                #{item.provId},
                #{item.provName},
                #{item.status},
                #{item.fillDate},
                #{item.filler},
                #{item.fillerName},
                #{item.auditor},
                #{item.confirmer},
                #{item.remark},
                #{item.lastUpdateDatetime},
                #{item.version}
            )
        </foreach>
    </insert>
    <insert id="insertReturnProvBillSubBatch">
        INSERT INTO `return_prov_bill_sub`
        (
            `id`,
            `bill_id`,
            `row_num`,
            `source_bill_id`,
            `source_bill_row`,
            `prov_goods_id`,
            `hos_goods_id`,
            `hos_goods_name`,
            `erp_goods_code`,
            `goods_gg`,
            `mrfs_id`,
            `mfrs_name`,
            `made`,
            `qty`,
            `unit`,
            `unique_kind`,
            `batch_code`,
            `sterilization_end_date`,
            `sterilization_code`,
            `sterilization_date`,
            `expdt_end_date`,
            `product_date`,
            `certificate_code`,
            `last_update_datetime`,
            `version`
        )
        VALUES
        <foreach collection="list" item="item" separator=",">
            (
                #{item.id},
                #{item.billId},
                #{item.rowNum},
                #{item.sourceBillId},
                #{item.sourceBillRow},
                #{item.provGoodsId},
                #{item.hosGoodsId},
                #{item.hosGoodsName},
                #{item.erpGoodsCode},
                #{item.goodsGg},
                #{item.mrfsId},
                #{item.mfrsName},
                #{item.made},
                #{item.qty},
                #{item.unit},
                #{item.uniqueKind},
                #{item.batchCode},
                #{item.sterilizationEndDate},
                #{item.sterilizationCode},
                #{item.sterilizationDate},
                #{item.expdtEndDate},
                #{item.productDate},
                #{item.certificateCode},
                #{item.lastUpdateDatetime},
                #{item.version}
            )
        </foreach>
    </insert>
    <insert id="insertReturnProvBillBatchBatch">
        INSERT INTO `return_prov_bill_batch`
        (
            `id`,
            `pid`,
            `bill_id`,
            `p_row_id`,
            `prov_id`,
            `goods_id`,
            `goods_batch_id`,
            `qty`,
            `big_batch_code`,
            `last_update_datetime`,
            `version`
        )
        VALUES
        <foreach collection="list" item="item" separator=",">
            (
                #{item.id},
                #{item.pid},
                #{item.billId},
                #{item.pRowId},
                #{item.provId},
                #{item.goodsId},
                #{item.goodsBatchId},
                #{item.qty},
                #{item.bigBatchCode},
                #{item.lastUpdateDatetime},
                #{item.version}
            )
        </foreach>
    </insert>
    <insert id="insertReturnProvBillUniqueBatch">
        INSERT INTO `return_prov_bill_unique_code`
        (
            `id`,
            `pid`,
            `bill_id`,
            `p_row_id`,
            `prov_id`,
            `goods_id`,
            `goods_batch_id`,
            `unique_code`,
            `last_update_datetime`,
            `version`
        )
        VALUES
        <foreach collection="list" item="item" separator=",">
            (
                #{item.id},
                #{item.pid},
                #{item.billId},
                #{item.pRowId},
                #{item.provId},
                #{item.goodsId},
                #{item.goodsBatchId},
                #{item.uniqueCode},
                #{item.lastUpdateDatetime},
                #{item.version}
            )
        </foreach>
    </insert>
    <update id="updateOutStockSub">
        UPDATE out_stock_list SET out_qty = 0, last_update_datetime = NOW(), version = version + 1
        WHERE
        <foreach collection="idVersions" item="item" separator="OR">
            (id = #{item.id} AND version = #{item.version})
        </foreach>
    </update>
    <update id="updateOutStockUnique">
        UPDATE out_stock_unique_code SET qty = 0, last_update_datetime = NOW(), version = version + 1
        WHERE pid IN
        <foreach collection="pids" item="pid" open="(" close=")" separator=",">
            #{pid}
        </foreach>
    </update>
    <update id="updateOutStockBatch">
        UPDATE out_stock_batch SET qty = 0, last_update_datetime = NOW(), version = version + 1
        WHERE pid IN
        <foreach collection="pids" item="pid" open="(" close=")" separator=",">
            #{pid}
        </foreach>
    </update>
    <select id="listSysOrgByCorpId" resultMap="gyqx.spdherp.stockout.dao.mapper.RequestOutMapper.sysOrgVoResultMap">
        SELECT
            org.id,
            org.pid,
            org.ename,
            COUNT( os.id ) AS bill_count,
            CASE WHEN org.id IN (SELECT dept_id FROM hos_dept_pur_stock WHERE hos_id = #{corpId} AND stock_id = #{deptId} )
            THEN 1
            ELSE 0
            END AS available
        FROM sys_org org
        LEFT OUTER JOIN out_stock os ON (
            os.in_dept_id = org.id
            AND os.out_org_id = org.corp_id
            AND os.out_stoc_id = #{stockId}
            AND os.status IN
            <foreach collection="statusList" item="status" open="(" close=")" separator=",">
                #{status}
            </foreach>
            AND os.out_stock_type IN ( SELECT pur_mode FROM apply_audit_rel where user_id =#{userId} )
            )
        <where>
            org.corp_id = #{corpId}
            AND org.flag = '1'
        </where>
        GROUP BY org.id
    </select>

    <resultMap id="OutStockBillBriefVoResultMap" type="gyqx.spdherp.stockout.vo.OutStockBillBriefVo">
        <id property="id" column="id"/>
        <result property="outStockKind" column="out_stock_kind"/>
        <result property="outStockType" column="out_stock_type"/>
        <result property="outDeptName" column="out_dept_name"/>
        <result property="status" column="status"/>
        <result property="version" column="version"/>
        <result property="goodsCount" column="goods_count"/>
        <result property="goodsSum" column="goods_sum"/>
        <result property="amount" column="amount"/>
    </resultMap>

    <select id="listBill" resultMap="OutStockBillBriefVoResultMap">
        SELECT
            os.id,
            os.out_stock_kind,
            os.out_stock_type,
            os.out_dept_name,
            os.`status`,
            os.version,
            COUNT(DISTINCT(osb.goods_id)) AS goods_count,
            SUM(osb.qty) AS goods_sum,
            SUM(IFNULL(osb.qty * osb.in_price,0)) AS amount
        FROM
          out_stock os
            LEFT OUTER JOIN
            ( SELECT id, bill_id, goods_id, in_price, qty FROM out_stock_batch
            UNION
            SELECT id, bill_id, goods_id, in_price, qty FROM out_stock_unique_code
            ) osb ON ( os.id = osb.bill_id)
        <where>
            os.out_org_id = #{corpId}
            AND os.out_stock_type IN ( SELECT pur_mode FROM apply_audit_rel where user_id =#{userId} )
            AND os.out_stoc_id IN
            <foreach collection="stockIdList" item="stockId" open="(" close=")" separator=",">
                #{stockId}
            </foreach>
            <choose>
                <when test="deptId == 'null' or deptId == ''">
                    AND os.in_dept_id IS NULL
                </when>
                <when test="deptId == 'all'">

                </when>
                <otherwise>
                    AND os.in_dept_id = #{deptId}
                </otherwise>
            </choose>
            <if test="beginDate != null">
                <![CDATA[
                AND os.fill_date > #{beginDate}
                ]]>
            </if>
            <if test="endDate != null">
                <![CDATA[
                AND os.fill_date < #{endDate}
                ]]>
            </if>
            <choose>
                <when test="status == 'undone'">
                    AND os.status IN
                    <foreach collection="statusList" item="status" open="(" close=")" separator=",">
                        #{status}
                    </foreach>
                </when>
                <when test="status == 'all'">

                </when>
                <otherwise>
                    AND os.status = #{status}
                </otherwise>
            </choose>
        </where>
        GROUP BY os.id
        ORDER BY os.id DESC
    </select>


    <resultMap id="OutStockBillDetailResultMap" type="gyqx.spdherp.stockout.vo.OutStockBillVo">
        <id property="id" column="id"/>
        <result property="billId" column="bill_id"/>
        <result property="outStockKind" column="out_stock_kind"/>
        <result property="outStockType" column="out_stock_type"/>
        <result property="outOrgId" column="out_org_id"/>
        <result property="outOrgName" column="out_org_name"/>
        <result property="outDeptId" column="out_dept_id"/>
        <result property="outDeptName" column="out_dept_name"/>
        <result property="outStocId" column="out_stoc_id"/>
        <result property="inDeptId" column="in_dept_id"/>
        <result property="fillDate" column="fill_date"/>
        <result property="filler" column="filler"/>
        <result property="accounterName" column="accounter_name"/>
        <result property="auditor" column="auditor"/>
        <result property="auditorName" column="auditor_name"/>
        <result property="auditDate" column="audit_date"/>
        <result property="accounter" column="accounter"/>
        <result property="accountDate" column="account_date"/>
        <result property="outOrgName" column="out_org_name"/>
        <result property="recAddressId" column="rec_address_id"/>
        <result property="recLinkman" column="rec_linkman"/>
        <result property="recLinkmanPhone" column="rec_linkman_phone"/>
        <result property="recAddress" column="rec_address"/>
        <result property="status" column="status"/>
        <result property="patientName" column="patient_name"/>
        <result property="costKind" column="cost_kind"/>
        <result property="version" column="version"/>
        <result property="goodsCount" column="goods_count"/>
        <result property="goodsSum" column="goods_sum"/>
        <result property="amount" column="amount"/>
        <result property="stocLevel" column="stoc_level"/>
        <collection property="subList" ofType="OutStockBillSubVoResultMap" select="listBillSub" column="id"/>
    </resultMap>
    <resultMap id="OutStockBillSubVoResultMap" type="gyqx.spdherp.stockout.vo.OutStockBillSubVo">
        <id column="id" property="id" jdbcType="VARCHAR"/>
        <result column="pid" property="pid" jdbcType="VARCHAR"/>
        <result column="bill_id" property="billId" jdbcType="VARCHAR"/>
        <result column="source_bill_id" property="sourceBillId" jdbcType="VARCHAR"/>
        <result column="out_bill_row" property="outBillRow" jdbcType="INTEGER"/>
        <result column="prov_id" property="provId" jdbcType="VARCHAR"/>
        <result column="prov_code" property="provCode" jdbcType="VARCHAR"/>
        <result column="prov_name" property="provName" jdbcType="VARCHAR"/>
        <result column="goods_id" property="goodsId" jdbcType="VARCHAR"/>
        <result column="goods_name" property="goodsName" jdbcType="VARCHAR"/>
        <result column="goods_gg" property="goodsGg" jdbcType="VARCHAR"/>
        <result column="mfrs_id" property="mfrsId" jdbcType="VARCHAR"/>
        <result column="mfrs_name" property="mfrsName" jdbcType="VARCHAR"/>
        <result column="made" property="made" jdbcType="VARCHAR"/>
        <result column="packet_code" property="packetCode" jdbcType="DOUBLE"/>
        <result column="is_packet" property="isPacket" jdbcType="CHAR"/>
        <result column="is_unique" property="isUnique" jdbcType="CHAR"/>
        <result column="batch_code" property="batchCode" jdbcType="VARCHAR"/>
        <result column="certificate_code" property="certificateCode" jdbcType="VARCHAR"/>
        <result column="sterilization_date" property="sterilizationDate" jdbcType="TIMESTAMP"/>
        <result column="sterilization_code" property="sterilizationCode" jdbcType="VARCHAR"/>
        <result column="sterilization_end_date" property="sterilizationEndDate" jdbcType="TIMESTAMP"/>
        <result column="expdt_end_date" property="expdtEndDate" jdbcType="TIMESTAMP"/>
        <result column="unit" property="unit" jdbcType="VARCHAR"/>
        <result column="out_qty" property="outQty" jdbcType="DOUBLE"/>
        <result column="out_packet_qty" property="outPacketQty" jdbcType="DOUBLE"/>
        <result column="master_code" property="masterCode" jdbcType="VARCHAR"/>
        <result column="sec_code" property="secCode" jdbcType="VARCHAR"/>
        <result column="hibc_code" property="hibcCode" jdbcType="VARCHAR"/>
        <result column="shelf_id" property="shelfId" jdbcType="VARCHAR"/>
        <result column="version" property="version" jdbcType="INTEGER"/>
        <result column="price" property="price" jdbcType="DOUBLE"/>
        <result column="avl_qty" property="avlQty" jdbcType="DOUBLE"/>
        <result column="req_qty" property="reqQty" jdbcType="DOUBLE"/>
        <result column="sent_qty" property="sentQty" jdbcType="DOUBLE"/>
        <result column="ef_point" property="efPoint" jdbcType="VARCHAR"/>
        <result column="saleBillId" property="saleBillId" jdbcType="VARCHAR"/>
    </resultMap>
    <select id="getBillDetail" resultMap="OutStockBillDetailResultMap">
        SELECT
            os.id,
            os.bill_id,
            out_stock_kind,
            out_stock_type,
            out_org_id,
            out_org_name,
            out_dept_id,
            out_dept_name,
            out_stoc_id,
            in_dept_id,
            os.fill_date,
            -- filler,
            IFNULL(suo_filler.ename, os.filler) AS filler,
            -- (SELECT ename from sys_user_org userOrg WHERE userOrg.user_id = auditor LIMIT 1 ) as auditorName,
            auditor,
            IFNULL(suo_auditor.ename, os.auditor) AS auditor_name,
            -- suo_auditor.ename AS auditor_name,
            -- (SELECT ename from sys_user_org userOrg WHERE userOrg.user_id = accounter LIMIT 1 ) as accounterName,
            audit_date,
            accounter,
            IFNULL(suo_accounter.ename, os.accounter) AS accounter_name,
            -- suo_accounter.ename AS accounter_name,
            account_date,
            rec_address_id,
            rec_linkman,
            rec_linkman_phone,
            rec_address,
            os.`status`,
            cost_kind,
            patient_name,
            stoc.stoc_level,
            os.version
        FROM
          out_stock os
            LEFT OUTER JOIN stoc_info stoc ON ( stoc.id = os.out_stoc_id )
            LEFT OUTER JOIN sys_user_org suo_filler ON ( suo_filler.user_id = os.filler )
            LEFT OUTER JOIN sys_user_org suo_auditor ON ( suo_auditor.user_id = os.auditor )
            LEFT OUTER JOIN sys_user_org suo_accounter ON ( suo_accounter.user_id = os.accounter )
        <where>
            os.out_stock_type IN ( SELECT pur_mode FROM apply_audit_rel where user_id = #{userId} )
            AND os.id = #{id}
        </where>
        ORDER BY os.id DESC
    </select>

    <sql id="OutStockBillSubVo_Column_List" >
        ${alias}.id, ${alias}.pid, ${alias}.bill_id, ${alias}.source_bill_id, ${alias}.out_bill_row, ${alias}.prov_id, ${alias}.prov_code,
        ${alias}.prov_name, ${alias}.goods_id,${alias}.goods_name, ${alias}.goods_gg, ${alias}.mfrs_id, ${alias}.mfrs_name,
        ${alias}.made, ${alias}.packet_code, ${alias}.is_packet, ${alias}.is_unique,${alias}.batch_code,${alias}.certificate_code, ${alias}.sterilization_date, ${alias}.sterilization_code,
        ${alias}.sterilization_end_date, ${alias}.expdt_end_date,${alias}.unit, ${alias}.out_packet_qty, ${alias}.master_code,
        ${alias}.sec_code, ${alias}.hibc_code, ${alias}.shelf_id, ${alias}.version
    </sql>
    <select id="listBillSub" resultMap="OutStockBillSubVoResultMap">
        SELECT
        <include refid="OutStockBillSubVo_Column_List"><property name="alias" value="oss"/></include>,
        osb.in_price AS price,
        stockpile.qty AS avl_qty,
        bs.qty AS req_qty,
        IFNULL(osb.qty, 0) AS out_qty,
        IFNULL(osb.qty, 0) AS sent_qty,
        if(ifnull(oss.expdt_end_date,'9999-12-31')>sysdate()||oss.expdt_end_date>sysdate(),'1','0') as ef_point,
        dbl.sale_bill_id AS saleBillId,
        v.erp_code AS erpCode
        FROM out_stock_list oss
        LEFT OUTER JOIN
        ( SELECT pid, goods_id, goods_batch_id, in_price, SUM(qty) AS qty FROM out_stock_batch WHERE bill_id = #{id} GROUP BY pid, goods_id, goods_batch_id, in_price
        UNION
        SELECT pid, goods_id, goods_batch_id, in_price, SUM(qty) AS qty FROM out_stock_unique_code WHERE bill_id = #{id} GROUP BY pid, goods_id, goods_batch_id, in_price
        ) osb ON ( oss.id = osb.pid AND oss.goods_id = osb.goods_id )
        LEFT OUTER JOIN out_stock os ON ( os.id = oss.pid )
        LEFT OUTER JOIN v_stockpile_hz stockpile ON ( stockpile.hos_id = os.out_org_id AND stockpile.stoc_id = os.out_stoc_id AND stockpile.hos_goods_id = oss.goods_id AND stockpile.stoc_kind = os.out_stock_type)
        LEFT OUTER JOIN dept_buy_sub bs ON ( bs.id = oss.source_bill_id )
        LEFT OUTER JOIN (select DISTINCT sale_bill_id,hos_goods_id,bill_id from distr_bill_list) dbl
        ON (osb.goods_batch_id = dbl.bill_id AND osb.goods_id = dbl.hos_goods_id)
        LEFT OUTER JOIN v_pro_hos_goodsinfo v ON v.id = oss.goods_id
        WHERE oss.pid = #{id}
    </select>

    <select id="stockpilebatchOutstock" resultType="java.lang.Integer">
        call p_stockpilebatch_outstock(#{id},#{accounter},#{version},@p_out) ;SELECT @p_out;
    </select>
    <select id="getWholeOutStockByUniqueCode" resultMap="EntireOutStockUniqueCodeResultMap">
        SELECT
          <include refid="entireOutStockUniqueSql">
            <property name="main" value="m"/>
            <property name="sub" value="s" />
            <property name="unique" value="u"/>
          </include>
        FROM
          out_stock_unique_code u
        INNER JOIN
          out_stock_list s ON (u.pid = s.id AND u.p_row_id = s.out_bill_row)
        INNER JOIN
          out_stock m ON (s.pid = m.id)
        WHERE m.out_org_id = #{hosId} AND
          u.unique_code IN
            <foreach collection="uniqueCodeList" item="item" separator="," open="(" close=")">
                #{item}
            </foreach>
        AND m.out_stock_type = #{outStockType}
    </select>
    <select id="getOutStockQtySum" resultType="gyqx.spdherp.stockout.vo.OutStockQtySum">
        select os.id, os.version, sum(IFNULL(osb.qty,0)+IFNULL(osuc.qty,0)) as out_qty, sum(IFNULL(osb.use_qty,0)) as batch_in_qty, sum(IFNULL(osuc.is_used,0)) as unique_in_qty
        from out_stock os
            left outer join out_stock_list osl on (osl.bill_id = os.id)
            left outer join out_stock_batch osb on (osb.bill_id = os.id and osb.p_row_id = osl.out_bill_row)
            left outer join out_stock_unique_code osuc on (osuc.bill_id = os.id and osuc.p_row_id = osl.out_bill_row)
        where os.id = #{outStockId} and os.out_stock_kind = #{kind} and os.status in
            <foreach collection="statusList" item="status" open="(" close=")" separator=",">
                #{status}
            </foreach>
        group by os.id, os.version;
    </select>
    <select id="getWholeOutStockByBigBatch" resultMap="EntireOutStockBatchResultMap">
        SELECT
        <include refid="entireOutStockBatchSql">
            <property name="main" value="m"/>
            <property name="sub" value="s" />
            <property name="batch" value="b"/>
        </include>
        FROM
        out_stock_batch b
        INNER JOIN
        out_stock_list s ON (b.pid = s.id AND b.p_row_id = s.out_bill_row)
        INNER JOIN
        out_stock m ON (s.pid = m.id)
        WHERE
        m.out_stock_type = #{outStockType} AND
        <foreach collection="bigBatchInfoList" item="item" separator="OR" open="(" close=")">
            (b.big_batch_code = #{item.bigBatchCode} AND s.sur_code = #{item.surCode})
        </foreach>
    </select>
    <select id="getEntireOutStockById" resultMap="EntireOutStockResultMap">
        SELECT
        <include refid="entireOutStockSql">
            <property name="main" value="os"/>
            <property name="sub" value="osl"/>
            <property name="batch" value="osb"/>
            <property name="unique" value="osu"/>
        </include>
        FROM
          out_stock os
        LEFT OUTER JOIN out_stock_list osl ON
          osl.pid = os.id
        LEFT OUTER JOIN out_stock_batch osb ON
          osb.pid = osl.id
          AND osb.p_row_id = osl.out_bill_row
        LEFT OUTER JOIN out_stock_unique_code osu ON
          osu.pid = osl.id
          AND osu.p_row_id = osl.out_bill_row
        WHERE
          os.id = #{billId}
    </select>
    <select id="listProvGoods" resultType="gyqx.spdherp.stockout.vo.ProvGoods">
        select distinct
                        hgi.id AS goods_id,
                        pgh.prov_id,
                        bci.cname AS prov_name,
                        bci.erp_code AS prov_erp_code,
                        pgh.prov_goodsid AS prov_goods_id,
                        pgi.erp_code AS prov_goods_erp
        from hos_goods_info hgi
            inner join prov_goods_hos pgh on hgi.code = pgh.his_code
            inner join bas_company_info bci on pgh.prov_id = bci.id
            inner join prov_goods_info pgi on pgh.prov_goodsid = pgi.id
        where hgi.id in
        <foreach collection="hosGoodsIds" separator="," open="(" close=")" item="id">
            #{id}
        </foreach>
    </select>
    <sql id="entireOutStockUniqueSql">
        ${main}.id,${main}.bill_id,${main}.out_stock_kind,${main}.out_stock_type,${main}.source_bill_id,${main}.out_org_id,${main}.out_org_name,${main}.out_dept_id,${main}.out_dept_name,${main}.out_stoc_id,${main}.in_org_id,${main}.in_org_name,${main}.in_dept_id,${main}.in_dept_name,${main}.in_stoc_id,${main}.fill_date,${main}.filler,${main}.auditor,${main}.audit_date,${main}.accounter,${main}.account_date,${main}.rec_address_id,${main}.rec_linkman,${main}.rec_linkman_phone,${main}.rec_address,${main}.status,${main}.patient_name,${main}.cost_kind,${main}.version,${main}.last_update_datetime,
        ${sub}.id AS s_id,${sub}.pid AS s_pid,${sub}.bill_id AS s_bill_id,${sub}.source_bill_id AS s_source_bill_id,${sub}.out_bill_row AS s_out_bill_row,${sub}.prov_id AS s_prov_id,${sub}.prov_code AS s_prov_code,${sub}.prov_name AS s_prov_name,${sub}.goods_id AS s_goods_id,${sub}.goods_name AS s_goods_name,${sub}.goods_gg AS s_goods_gg,${sub}.mfrs_id AS s_mfrs_id,${sub}.mfrs_name AS s_mfrs_name,${sub}.made AS s_made,${sub}.packet_code AS s_packet_code,${sub}.is_packet AS s_is_packet,${sub}.is_unique AS s_is_unique,${sub}.batch_code AS s_batch_code,${sub}.sterilization_date AS s_sterilization_date,${sub}.sterilization_code AS s_sterilization_code,${sub}.sterilization_end_date AS s_sterilization_end_date,${sub}.expdt_end_date AS s_expdt_end_date,${sub}.unit AS s_unit,${sub}.out_qty AS s_out_qty,${sub}.out_packet_qty AS s_out_packet_qty,${sub}.master_code AS s_master_code,${sub}.sec_code AS s_sec_code,${sub}.status AS s_status,${sub}.hibc_code AS s_hibc_code,${sub}.shelf_id AS s_shelf_id,${sub}.version AS s_version,${sub}.last_update_datetime AS s_last_update_datetime,${sub}.certificate_code AS s_certificate_code,
        ${unique}.id AS s_u_id,${unique}.pid AS s_u_pid,${unique}.bill_id AS s_u_bill_id,${unique}.p_row_id AS s_u_p_row_id,${unique}.prov_id AS s_u_prov_id,${unique}.goods_id AS s_u_goods_id,${unique}.goods_batch_id AS s_u_goods_batch_id,${unique}.in_price AS s_u_in_price,${unique}.in_time AS s_u_in_time,${unique}.unique_code AS s_u_unique_code,${unique}.version AS s_u_version,${unique}.last_update_datetime AS s_u_last_update_datetime,${unique}.epc AS s_u_epc
    </sql>

    <resultMap id="EntireOutStockUniqueCodeResultMap" type="gyqx.spdherp.stockout.vo.EntireOutStockVo" autoMapping="true">
        <id column="id" property="id"/>
        <collection property="entireOutStockListVoList" columnPrefix="s_" ofType="gyqx.spdherp.stockout.vo.EntireOutStockListVo" autoMapping="true">
            <id column="id" property="id"/>
            <collection property="outStockUniqueCodeList" columnPrefix="u_" ofType="gyqx.spdherp.po.OutStockUniqueCode" autoMapping="true">
                <id column="id" property="id"/>
            </collection>
        </collection>
    </resultMap>

    <sql id="entireOutStockSql">
        ${main}.id,${main}.bill_id,${main}.out_stock_kind,${main}.out_stock_type,${main}.source_bill_id,${main}.out_org_id,${main}.out_org_name,${main}.out_dept_id,${main}.out_dept_name,${main}.out_stoc_id,${main}.in_org_id,${main}.in_org_name,${main}.in_dept_id,${main}.in_dept_name,${main}.in_stoc_id,${main}.fill_date,${main}.filler,${main}.auditor,${main}.audit_date,${main}.accounter,${main}.account_date,${main}.rec_address_id,${main}.rec_linkman,${main}.rec_linkman_phone,${main}.rec_address,${main}.status,${main}.patient_name,${main}.cost_kind,${main}.version,${main}.last_update_datetime,
        ${sub}.id AS s_id,${sub}.pid AS s_pid,${sub}.bill_id AS s_bill_id,${sub}.source_bill_id AS s_source_bill_id,${sub}.out_bill_row AS s_out_bill_row,${sub}.prov_id AS s_prov_id,${sub}.prov_code AS s_prov_code,${sub}.prov_name AS s_prov_name,${sub}.goods_id AS s_goods_id,${sub}.goods_name AS s_goods_name,${sub}.goods_gg AS s_goods_gg,${sub}.mfrs_id AS s_mfrs_id,${sub}.mfrs_name AS s_mfrs_name,${sub}.made AS s_made,${sub}.packet_code AS s_packet_code,${sub}.is_packet AS s_is_packet,${sub}.is_unique AS s_is_unique,${sub}.batch_code AS s_batch_code,${sub}.sterilization_date AS s_sterilization_date,${sub}.sterilization_code AS s_sterilization_code,${sub}.sterilization_end_date AS s_sterilization_end_date,${sub}.expdt_end_date AS s_expdt_end_date,${sub}.unit AS s_unit,${sub}.out_qty AS s_out_qty,${sub}.out_packet_qty AS s_out_packet_qty,${sub}.master_code AS s_master_code,${sub}.sec_code AS s_sec_code,${sub}.status AS s_status,${sub}.hibc_code AS s_hibc_code,${sub}.shelf_id AS s_shelf_id,${sub}.version AS s_version,${sub}.last_update_datetime AS s_last_update_datetime,${sub}.certificate_code AS s_certificate_code,
        ${batch}.id AS s_b_id,${batch}.pid AS s_b_pid,${batch}.bill_id AS s_b_bill_id,${batch}.p_row_id AS s_b_p_row_id,${batch}.prov_id AS s_b_prov_id,${batch}.goods_id AS s_b_goods_id,${batch}.goods_batch_id AS s_b_goods_batch_id,${batch}.in_price AS s_b_in_price,${batch}.in_time AS s_b_in_time,${batch}.qty AS s_b_qty,${batch}.big_batch_code AS s_b_big_batch_code,${batch}.version AS s_b_version,${batch}.last_update_datetime AS s_b_last_update_datetime,${batch}.use_qty AS s_b_use_qty,${batch}.settle_qty AS s_b_settle_qty,
        ${unique}.id AS s_u_id,${unique}.pid AS s_u_pid,${unique}.bill_id AS s_u_bill_id,${unique}.p_row_id AS s_u_p_row_id,${unique}.prov_id AS s_u_prov_id,${unique}.goods_id AS s_u_goods_id,${unique}.goods_batch_id AS s_u_goods_batch_id,${unique}.in_price AS s_u_in_price,${unique}.in_time AS s_u_in_time,${unique}.unique_code AS s_u_unique_code,${unique}.version AS s_u_version,${unique}.last_update_datetime AS s_u_last_update_datetime,${unique}.epc AS s_u_epc
    </sql>

    <resultMap id="EntireOutStockResultMap" type="gyqx.spdherp.stockout.vo.EntireOutStockVo" autoMapping="true">
        <id column="id" property="id"/>
        <collection property="entireOutStockListVoList" columnPrefix="s_" ofType="gyqx.spdherp.stockout.vo.EntireOutStockListVo" autoMapping="true">
            <id column="id" property="id"/>
            <collection property="outStockBatchList" columnPrefix="b_" ofType="gyqx.spdherp.po.OutStockBatch" autoMapping="true">
                <id column="id" property="id"/>
            </collection>
            <collection property="outStockUniqueCodeList" columnPrefix="u_" ofType="gyqx.spdherp.po.OutStockUniqueCode" autoMapping="true">
                <id column="id" property="id"/>
            </collection>
        </collection>
    </resultMap>

    <sql id="entireOutStockBatchSql">
        ${main}.id,${main}.bill_id,${main}.out_stock_kind,${main}.out_stock_type,${main}.source_bill_id,${main}.out_org_id,${main}.out_org_name,${main}.out_dept_id,${main}.out_dept_name,${main}.out_stoc_id,${main}.in_org_id,${main}.in_org_name,${main}.in_dept_id,${main}.in_dept_name,${main}.in_stoc_id,${main}.fill_date,${main}.filler,${main}.auditor,${main}.audit_date,${main}.accounter,${main}.account_date,${main}.rec_address_id,${main}.rec_linkman,${main}.rec_linkman_phone,${main}.rec_address,${main}.status,${main}.patient_name,${main}.cost_kind,${main}.version,${main}.last_update_datetime,${main}.remark,
        ${sub}.id AS s_id,${sub}.pid AS s_pid,${sub}.bill_id AS s_bill_id,${sub}.source_bill_id AS s_source_bill_id,${sub}.out_bill_row AS s_out_bill_row,${sub}.prov_id AS s_prov_id,${sub}.prov_code AS s_prov_code,${sub}.prov_name AS s_prov_name,${sub}.goods_id AS s_goods_id,${sub}.goods_name AS s_goods_name,${sub}.goods_gg AS s_goods_gg,${sub}.mfrs_id AS s_mfrs_id,${sub}.mfrs_name AS s_mfrs_name,${sub}.made AS s_made,${sub}.packet_code AS s_packet_code,${sub}.is_packet AS s_is_packet,${sub}.is_unique AS s_is_unique,${sub}.batch_code AS s_batch_code,${sub}.sterilization_date AS s_sterilization_date,${sub}.sterilization_code AS s_sterilization_code,${sub}.sterilization_end_date AS s_sterilization_end_date,${sub}.expdt_end_date AS s_expdt_end_date,${sub}.unit AS s_unit,${sub}.out_qty AS s_out_qty,${sub}.out_packet_qty AS s_out_packet_qty,${sub}.master_code AS s_master_code,${sub}.sec_code AS s_sec_code,${sub}.status AS s_status,${sub}.hibc_code AS s_hibc_code,${sub}.shelf_id AS s_shelf_id,${sub}.version AS s_version,${sub}.last_update_datetime AS s_last_update_datetime,${sub}.certificate_code AS s_certificate_code, ${sub}.sur_code AS s_sur_code,
        ${batch}.id AS s_b_id, ${batch}.pid AS s_b_pid, ${batch}.bill_id AS s_b_bill_id, ${batch}.p_row_id AS s_b_p_row_id, ${batch}.prov_id AS s_b_prov_id, ${batch}.goods_id AS s_b_goods_id, ${batch}.goods_batch_id AS s_b_goods_batch_id, ${batch}.in_price AS s_b_in_price, ${batch}.in_time AS s_b_in_time, ${batch}.qty AS s_b_qty, ${batch}.big_batch_code AS s_b_big_batch_code, ${batch}.version AS s_b_version, ${batch}.last_update_datetime AS s_b_last_update_datetime, ${batch}.use_qty AS s_b_use_qty, ${batch}.settle_qty AS s_b_settle_qty
    </sql>

    <resultMap id="EntireOutStockBatchResultMap" type="gyqx.spdherp.stockout.vo.EntireOutStockVo" autoMapping="true">
        <id column="id" property="id"/>
        <collection property="entireOutStockListVoList" columnPrefix="s_" ofType="gyqx.spdherp.stockout.vo.EntireOutStockListVo" autoMapping="true">
            <id column="id" property="id"/>
            <collection property="outStockBatchList" columnPrefix="b_" ofType="gyqx.spdherp.po.OutStockBatch" autoMapping="true">
                <id column="id" property="id"/>
            </collection>
        </collection>
    </resultMap>
</mapper>
